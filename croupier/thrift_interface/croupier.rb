#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'croupier_types'

module Croupier
  class Client
    include ::Thrift::Client

    def register_player(host, port)
      send_register_player(host, port)
      recv_register_player()
    end

    def send_register_player(host, port)
      send_message('register_player', Register_player_args, :host => host, :port => port)
    end

    def recv_register_player()
      result = receive_message(Register_player_result)
      return
    end

    def register_spectator(host, port)
      send_register_spectator(host, port)
      recv_register_spectator()
    end

    def send_register_spectator(host, port)
      send_message('register_spectator', Register_spectator_args, :host => host, :port => port)
    end

    def recv_register_spectator()
      result = receive_message(Register_spectator_result)
      return
    end

    def start_sit_and_go()
      send_start_sit_and_go()
      recv_start_sit_and_go()
    end

    def send_start_sit_and_go()
      send_message('start_sit_and_go', Start_sit_and_go_args)
    end

    def recv_start_sit_and_go()
      result = receive_message(Start_sit_and_go_result)
      return
    end

    def start_live_action_game()
      send_start_live_action_game()
      recv_start_live_action_game()
    end

    def send_start_live_action_game()
      send_message('start_live_action_game', Start_live_action_game_args)
    end

    def recv_start_live_action_game()
      result = receive_message(Start_live_action_game_result)
      return
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_register_player(seqid, iprot, oprot)
      args = read_args(iprot, Register_player_args)
      result = Register_player_result.new()
      @handler.register_player(args.host, args.port)
      write_result(result, oprot, 'register_player', seqid)
    end

    def process_register_spectator(seqid, iprot, oprot)
      args = read_args(iprot, Register_spectator_args)
      result = Register_spectator_result.new()
      @handler.register_spectator(args.host, args.port)
      write_result(result, oprot, 'register_spectator', seqid)
    end

    def process_start_sit_and_go(seqid, iprot, oprot)
      args = read_args(iprot, Start_sit_and_go_args)
      result = Start_sit_and_go_result.new()
      @handler.start_sit_and_go()
      write_result(result, oprot, 'start_sit_and_go', seqid)
    end

    def process_start_live_action_game(seqid, iprot, oprot)
      args = read_args(iprot, Start_live_action_game_args)
      result = Start_live_action_game_result.new()
      @handler.start_live_action_game()
      write_result(result, oprot, 'start_live_action_game', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Register_player_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOST = 1
    PORT = 2

    FIELDS = {
      HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
      PORT => {:type => ::Thrift::Types::I16, :name => 'port'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Register_player_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Register_spectator_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    HOST = 1
    PORT = 2

    FIELDS = {
      HOST => {:type => ::Thrift::Types::STRING, :name => 'host'},
      PORT => {:type => ::Thrift::Types::I16, :name => 'port'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Register_spectator_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_sit_and_go_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_sit_and_go_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_live_action_game_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Start_live_action_game_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

